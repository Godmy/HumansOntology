version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15
    container_name: humansontology_db_prod
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: humansontology_redis_prod
    command: redis-server ${REDIS_PASSWORD:+--requirepass $REDIS_PASSWORD}
    volumes:
      - redis_data_prod:/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "redis-cli", ${REDIS_PASSWORD:+--pass $REDIS_PASSWORD}, "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: always

  # Backend API
  backend:
    build:
      context: ./packages/backend
      dockerfile: Dockerfile
    container_name: humansontology_backend_prod
    environment:
      # Database
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}

      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: ${REDIS_DB:-0}
      REDIS_PASSWORD: ${REDIS_PASSWORD}

      # JWT
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_ALGORITHM: ${JWT_ALGORITHM:-HS256}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      REFRESH_TOKEN_EXPIRE_DAYS: ${REFRESH_TOKEN_EXPIRE_DAYS:-7}

      # Application
      APP_HOST: 0.0.0.0
      APP_PORT: 8000
      DEBUG: False
      SEED_DATABASE: ${SEED_DATABASE:-false}
      ENVIRONMENT: production

      # CORS
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}

      # Email
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_USE_TLS: ${SMTP_USE_TLS:-True}
      FROM_EMAIL: ${FROM_EMAIL}
      FRONTEND_URL: ${FRONTEND_URL}

      # OAuth
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}

      # File Upload
      UPLOAD_DIR: ${UPLOAD_DIR:-uploads}

      # Sentry
      SENTRY_DSN: ${SENTRY_DSN}
      SENTRY_ENABLE_TRACING: ${SENTRY_ENABLE_TRACING:-true}
      SENTRY_TRACES_SAMPLE_RATE: ${SENTRY_TRACES_SAMPLE_RATE:-0.1}
      SENTRY_DEBUG: False
    volumes:
      - backend_uploads_prod:/app/uploads
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: always

  # Frontend Application
  frontend:
    build:
      context: ./packages/frontend
      dockerfile: Dockerfile
      args:
        VITE_GRAPHQL_ENDPOINT: ${VITE_GRAPHQL_ENDPOINT}
        VITE_APP_ENV: production
        VITE_APP_URL: ${VITE_APP_URL}
        VITE_DEBUG: false
    container_name: humansontology_frontend_prod
    environment:
      NODE_ENV: production
      VITE_GRAPHQL_ENDPOINT: ${VITE_GRAPHQL_ENDPOINT}
      VITE_APP_ENV: production
      VITE_APP_URL: ${VITE_APP_URL}
      VITE_DEBUG: false
      API_BASE_URL: http://backend:8000/graphql
      BACKEND_URL: http://backend:8000
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/', (r) => r.statusCode !== null ? process.exit(0) : process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: always

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: humansontology_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - app_network
    restart: always

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  backend_uploads_prod:
    driver: local

networks:
  app_network:
    driver: bridge
